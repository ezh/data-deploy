#!/usr/bin/bash
set -e

KUBE_CLUSTER=http://localhost:8080
KBIN="kubectl -s $KUBE_CLUSTER"


already_created() {
    ret_val=1
    name=$1
    case "$name" in
    *kube-ui*)
        if [ $($KBIN get rc --namespace=kube-system -l k8s-app=kube-ui |awk '{print $2}'|tail -1) = "kube-ui" ];
        then
            ret_val=0
        else
            ret_val=1
        fi
        ;;
    *)
        $KBIN get $1 > /dev/null 2>&1
        ret_val=$?
        ;;
    esac
    return $ret_val
}


pod_running() {
    phase=`$KBIN get pods $1 --template={{.status.phase}}`
    echo "pod $1 phase is $phase"
    if [ "$phase" = "Running" ];
    then
        return 0
    else
        return 1
    fi
}


start_in_k8s() {
    full_name=$1
    if [ -z "$2" ]
    then
        namespace=""
    else
        namespace="--namespace=$2"
    fi
    case "$full_name" in
    *service*)
        sleep_time=5
        ;;
    *)
        sleep_time=15
        ;;
    esac
    if already_created $full_name;
    then
        echo "$full_name is already created"
    else
        echo conf/$full_name\.yml
        $KBIN create -f conf/$full_name\.yml $namespace
        sleep $sleep_time
    fi
}


start_etcd_in_k8s() {
    for name in etcd0 etcd1 etcd2; do
        start_in_k8s service/$name
    done
    for name in etcd0 etcd1 etcd2; do
        start_in_k8s pod/$name
    done
}


create_influxdb_databases() {
    influxdb_host=`$KBIN get service/influxdb -t={{.spec.clusterIP}}`
    for name in data_stats monitoring; do
        curl -s -G http://$influxdb_host:8086/query --data-urlencode "q=CREATE DATABASE $name"
    done
}


create_etcd_entries() {
    etcd_host=`$KBIN get services/etcd0 -t={{.spec.clusterIP}}`
    etcdctl --endpoint="http://$etcd_host:2379" set /data/collector/url null
    etcdctl --endpoint="http://$etcd_host:2379" set /data/collector/delay 15
    echo done
}


wait_for_pod() {
    for i in `seq 0 5`;
    do
        if pod_running $1;
        then
            echo Pod $1 is in running state
            return
        else
            if [ $i = "5" ];
            then
                echo "Timeout waiting for pod $1 to be in running state"
                exit 1
            fi
            echo "Pod $1 still not in running state. Waiting"
            sleep 25
        fi
    done
}


start_infrastructure() {
    echo "Starting infrastructure in Kubernetes"
    start_etcd_in_k8s

    for n in influxdb rabbitmq rethinkdb; do
        start_in_k8s service/$n
        start_in_k8s rc/$n
    done

    echo Creating initial configuration in etcd
    wait_for_pod "etcd0"
    create_etcd_entries
    echo

    echo Creating influxdb databases
    pod_name=`$KBIN get pods --no-headers -l component=influxdb | awk '{print $1}'`
    wait_for_pod $pod_name
    create_influxdb_databases
    echo

    echo Starting WebSocket service
    pod_name=`$KBIN get pods --no-headers -l component=rethinkdb | awk '{print $1}'`
    wait_for_pod $pod_name
    start_in_k8s service/data-ws
    start_in_k8s rc/data-ws
    echo
}


start_app() {
    echo "Starting app"
    for name in data-frontend data-backend data-notifier data-collector data-processor; do
        start_in_k8s rc/$name
    done
    echo
}


start_kubernetes() {
    if [[ -z $(docker-compose ps -q) ]]; then
        echo "Starting kubernetes cluster"
        docker-compose up -d
        sleep 25
        start_in_k8s service/kube-ui kube-system
        start_in_k8s rc/kube-ui kube-system
    else
        echo "Kubernetes cluster is already running"
    fi
    echo
}


start_kubernetes
start_infrastructure
start_app
echo "Done"
