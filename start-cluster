#!/usr/bin/bash
set -e

if [ "$(id -u)" != "0" ]; then
    echo "Run as root."
    exit 1
fi

KUBE_CLUSTER=http://localhost:8080
KBIN="kubectl -s $KUBE_CLUSTER"

is_running() {
    ret_val=1
    name=$1
    case "$name" in
    *kube-ui*)
        if [ $($KBIN get rc --namespace=kube-system -l k8s-app=kube-ui |awk '{print $2}'|tail -1) = "kube-ui" ];
        then
            ret_val=0
        else
            ret_val=1
        fi
        ;;
    *)
        $KBIN get $1 > /dev/null 2>&1
        ret_val=$?
        ;;
    esac
    return $ret_val
}


start_in_k8s() {
    full_name=$1
    if [ -z "$2" ]
    then
        namespace=""
    else
        namespace="--namespace=$2"
    fi
    case "$full_name" in
    *service*)
        sleep_time=5
        ;;
    *)
        sleep_time=15
        ;;
    esac
    if is_running $full_name;
    then
        echo "$full_name is already running"
    else
        echo conf/$full_name\.yml
        $KBIN create -f conf/$full_name\.yml $namespace
        sleep $sleep_time
    fi
}


start_etcd_in_k8s() {
    for name in etcd0 etcd1 etcd2; do
        start_in_k8s service/$name
    done
    for name in etcd0 etcd1 etcd2; do
        start_in_k8s pod/$name
    done
}


start_infrastructure() {
    echo "Starting infrastructure in Kubernetes"
    start_in_k8s service/kube-ui kube-system
    start_in_k8s rc/kube-ui kube-system

    start_etcd_in_k8s

    for n in influxdb rabbitmq; do
        start_in_k8s service/$n
        start_in_k8s rc/$n
    done

    echo
    echo "Creating influxdb databases"
    influxdb_host=`$KBIN get service/influxdb -t={{.spec.clusterIP}}`
    for name in data_stats monitoring; do
        curl -s -G http://$influxdb_host:8086/query --data-urlencode "q=CREATE DATABASE $name" > /dev/null
    done
    echo
}


start_app() {
    echo "Starting app"
    for name in data-pipeline; do
        start_in_k8s rc/$name
    done
    echo
}


start_kubernetes() {
    if [[ -z $(docker-compose ps -q) ]]; then
        echo "Starting kubernetes cluster"
        docker-compose up -d
        sleep 20
    else
        echo "Kubernetes cluster is already running"
    fi
    echo
}


start_kubernetes
start_infrastructure
start_app
echo "Done"
