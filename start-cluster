#!/usr/bin/bash
set -e

if [ "$(id -u)" != "0" ]; then
    echo "Run as root."
    exit 1
fi

KUBE_CLUSTER=http://localhost:8080
KBIN="kubectl -s $KUBE_CLUSTER"

is_running() {
    $KBIN get $1 > /dev/null 2>&1
    return $?
}

start_in_k8s() {
    full_name=$1
    name=$full_name | cut -d'/' -f 2
    if is_running $full_name;
    then
        echo "$full_name is already running"
    else
        case "$full_name" in
          *rc*)
            $KBIN create -f conf/$name-rc.yml
            ;;
          *service*)
            $KBIN create -f conf/$name-svc.yml
            ;;
        esac
        sleep 20
    fi
}


if [[ -z $(docker-compose ps -q) ]]; then
    echo "Starting kubernetes cluster"
    docker-compose up -d
    sleep 30
else
    echo "Kubernetes cluster is already running"
fi
echo


if [ $($KBIN get rc --namespace=kube-system|awk '{print $2}'|tail -1) = "kube-ui" ]
then
    echo "k8s UI already running"
else
    echo "Adding kube-ui"
    $KBIN create -f conf/kube-ui-rc.yml --namespace=kube-system
    $KBIN create -f conf/kube-ui-svc.yml --namespace=kube-system
fi
echo


echo "Starting services"
for name in influxdb etcd rabbitmq; do
    start_in_k8s rc/$name
    start_in_k8s service/$name
done
echo

echo "Creating influxdb databases"
INFLUXDB_HOST=`$KBIN get service/influxdb -t={{.spec.portalIP}}`
for name in data_stats monitoring; do
    curl -G http://$INFLUXDB_HOST:8086/query --data-urlencode "q=CREATE DATABASE $name" > /dev/null 2>&1
done
echo


echo "Starting pods"
for name in data-pipeline; do
    start_in_k8s rc/$name
done
echo

echo "Done"
