#!/usr/bin/bash
set -e

if [ "$(id -u)" != "0" ]; then
    echo "Run as root."
    exit 1
fi

KUBE_CLUSTER=http://localhost:8080
KBIN="kubectl -s $KUBE_CLUSTER"

is_running() {
    ret_val=1
    case "$name" in
    *kue-ui*)
        if [ $($KBIN get rc --namespace=kube-system -l k8s-app=kube-ui |awk '{print $2}'|tail -1) = "kube-ui" ];
        then
            ret_val=0
        else
            ret_val=1
        fi
        ;;
    *)
        $KBIN get $1 > /dev/null 2>&1
        ret_val=$?
        ;;
    esac
    return $ret_val
}

start_in_k8s() {
    name=$1
    if [ -z "$2" ]
    then
        namespace=""
    else
        namespace="--namespace=$2"
    fi
    if [ $name = "kube-ui" ]; then
        sleep_time=1
    else
        sleep_time=30
    fi
    final_sleep_time=$sleep_time
    for t in rc service pod; do
        full_name=$t/$name
        if is_running $full_name;
        then
            echo "$full_name is already running"
            final_sleep_time=0
        else
            final_sleep_time=$sleep_time
            path=conf/$t/$name.yml
            if [[ -e $path ]]; then
                $KBIN create -f $path $namespace
            fi
        fi
    done
    sleep $final_sleep_time
}


if [[ -z $(docker-compose ps -q) ]]; then
    echo "Starting kubernetes cluster"
    docker-compose up -d
    sleep 20
else
    echo "Kubernetes cluster is already running"
fi
echo


echo "Starting addons"
start_in_k8s kube-ui kube-system
echo


echo "Starting in Kubernetes"
for name in influxdb etcd0 etcd1 etcd2 rabbitmq; do
    start_in_k8s $name
done
echo


echo "Creating influxdb databases"
INFLUXDB_HOST=`$KBIN get service/influxdb -t={{.spec.clusterIP}}`
for name in data_stats monitoring; do
    curl -s -G http://$INFLUXDB_HOST:8086/query --data-urlencode "q=CREATE DATABASE $name" > /dev/null
done
echo


echo "Starting app"
for name in data-pipeline; do
    start_in_k8s $name
done
echo

echo "Done"
